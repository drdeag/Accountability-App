name: Android APK (Debug)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Unzip project (handles spaces/parentheses; searches repo; picks highest #)
        id: unzip
        shell: bash
        run: |
          set -euo pipefail

          # Prefer Accountability_Project*.zip; otherwise pick newest *.zip
          mapfile -d '' pref < <(find . -type f -iname 'Accountability_Project*.zip' -print0)
          mapfile -d '' any  < <(find . -type f -iname '*.zip' -print0)

          pick=""
          if [ ${#pref[@]} -gt 0 ]; then
            pick_basename="$(printf '%s\n' "${pref[@]##*/}" | sort -V | tail -n1)"
            for p in "${pref[@]}"; do
              if [ "${p##*/}" = "$pick_basename" ]; then pick="$p"; fi
            done
          elif [ ${#any[@]} -gt 0 ]; then
            pick_basename="$(printf '%s\n' "${any[@]##*/}" | sort -V | tail -n1)"
            for p in "${any[@]}"; do
              if [ "${p##*/}" = "$pick_basename" ]; then pick="$p"; fi
            done
          fi

          if [ -z "${pick:-}" ]; then
            echo "ERROR: No .zip files found in repository." >&2
            exit 1
          fi

          echo "Using zip: $pick"
          unzip -q "$pick" -d extracted

          # Detect project dir (prefer Gradle wrapper; else settings.gradle[.kts])
          gradlew_path="$(find extracted -type f -name gradlew -print -quit || true)"
          if [ -n "$gradlew_path" ]; then
            project_dir="$(dirname "$gradlew_path")"
            echo "HAS_WRAPPER=true" >> "$GITHUB_ENV"
            chmod +x "$project_dir/gradlew"
          else
            project_dir="$(find extracted -type f \( -name settings.gradle -o -name settings.gradle.kts \) -exec dirname {} \; | head -n1 || true)"
            if [ -z "$project_dir" ]; then
              echo "ERROR: Could not locate a Gradle project (no gradlew, no settings.gradle*)." >&2
              exit 1
            fi
            echo "HAS_WRAPPER=false" >> "$GITHUB_ENV"
          fi

          echo "PROJECT_DIR=$project_dir" >> "$GITHUB_ENV"
          echo "Detected project dir: $project_dir"

      - name: Show project structure
        run: |
          echo "=== Project tree (top 200) ==="
          (cd "$PROJECT_DIR" && ls -la && echo && find . -maxdepth 3 -type d -print | head -n 200)

      - name: Detect Android SDK requirements (compileSdk & buildTools)
        id: detect_sdk
        shell: bash
        run: |
          set -euo pipefail
          cd "$PROJECT_DIR"
          files="$(find . -maxdepth 3 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \))"
          echo "Scanning files:"
          echo "$files"
          compileSdk=""
          buildTools=""
          if grep -RqsE 'compileSdk(Vers|)\s*[:=]\s*[0-9]+' $files; then
            compileSdk="$(grep -RIEho 'compileSdk(?:Version)?\s*[:=]?\s*([0-9]+)' $files | sed -E 's/[^0-9]*([0-9]+).*/\1/' | tail -n1)"
          fi
          if grep -RqsE 'buildToolsVersion' $files; then
            buildTools="$(grep -RIEho 'buildToolsVersion\s*["'\'']([0-9]+\.[0-9]+\.[0-9]+)["'\'']' $files | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/' | tail -n1)"
          fi
          echo "Detected compileSdk: ${compileSdk:-<none>}"
          echo "Detected buildTools: ${buildTools:-<none>}"
          echo "COMPILE_SDK=${compileSdk}" >> "$GITHUB_ENV"
          echo "BUILD_TOOLS=${buildTools}" >> "$GITHUB_ENV"

      - name: Install required SDK platforms & build-tools
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${COMPILE_SDK:-}" ]; then
            echo "Installing platforms;android-${COMPILE_SDK}"
            sdkmanager "platforms;android-${COMPILE_SDK}" || true
          else
            echo "No compileSdk detected; installing platforms;android-33 as fallback"
            sdkmanager "platforms;android-33" || true
          fi
          if [ -n "${BUILD_TOOLS:-}" ]; then
            echo "Installing build-tools;${BUILD_TOOLS}"
            sdkmanager "build-tools;${BUILD_TOOLS}" || true
          else
            echo "No buildToolsVersion detected; installing build-tools;33.0.2 as fallback"
            sdkmanager "build-tools;33.0.2" || true
          fi

      - name: Sanitize AndroidManifest.xml (strip BOM/XML decl/leading blanks)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' manifests < <(find "$PROJECT_DIR" -type f -name AndroidManifest.xml -print0 || true)
          if [ ${#manifests[@]} -eq 0 ]; then
            echo "WARNING: No AndroidManifest.xml found under $PROJECT_DIR"
            exit 0
          fi
          for f in "${manifests[@]}"; do
            # Remove UTF-8 BOM and optional XML declaration + leading whitespace
            perl -i -0777 -pe 's/^\x{FEFF}//; s/\A(?:\s*<\?xml[^>]*\?>)?\s*//s' "$f"
            echo "Sanitized: $f"
          done

      - name: Install XML tools (for manifest validation)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Validate AndroidManifest.xml (fail-fast with line/col)
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Searching for AndroidManifest.xml files ==="
          mapfile -d '' manifests < <(find "$PROJECT_DIR" -type f -name AndroidManifest.xml -print0 || true)
          if [ ${#manifests[@]} -eq 0 ]; then
            echo "ERROR: No AndroidManifest.xml found under $PROJECT_DIR"
            exit 1
          fi
          for f in "${manifests[@]}"; do
            echo "----- $f -----"
            nl -ba "$f" | sed -n '1,160p'
            echo "Validating XML..."
            xmllint --noout "$f"
            echo "OK"
            echo
          done

      - name: Set up Gradle (no wrapper case)
        if: ${{ env.HAS_WRAPPER == 'false' }}
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: '8.7'

      - name: Build debug APK (with wrapper)
        if: ${{ env.HAS_WRAPPER == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          cd "$PROJECT_DIR"
          ./gradlew --no-daemon --warning-mode all --stacktrace --info assembleDebug 2>&1 | tee "$GITHUB_WORKSPACE/build.log"
          echo "Build (wrapper) exit code: ${PIPESTATUS[0]}"
          exit ${PIPESTATUS[0]}

      - name: Build debug APK (no wrapper)
        if: ${{ env.HAS_WRAPPER == 'false' }}
        shell: bash
        run: |
          set -euo pipefail
          gradle -p "$PROJECT_DIR" --no-daemon --warning-mode all --stacktrace --info assembleDebug 2>&1 | tee "$GITHUB_WORKSPACE/build.log"
          echo "Build (no wrapper) exit code: ${PIPESTATUS[0]}"
          exit ${PIPESTATUS[0]}

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            ${{ env.PROJECT_DIR }}/**/outputs/apk/debug/*.apk
            ${{ env.PROJECT_DIR }}/**/outputs/apk/*/debug/*.apk

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ github.workspace }}/build.log
            /home/runner/.gradle/daemon/*/*.log
