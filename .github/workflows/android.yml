name: Android APK (Debug)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Install SDK platforms & build-tools
        run: sdkmanager "platforms;android-33" "build-tools;33.0.2"

      - name: Unzip project (handles spaces/parentheses; searches repo; picks highest #)
        id: unzip
        shell: bash
        run: |
          set -euo pipefail

          # Collect candidate zips anywhere in the repo. Prefer "Accountability_Project*.zip" but allow any *.zip.
          mapfile -d '' pref < <(find . -type f -iname 'Accountability_Project*.zip' -print0)
          mapfile -d '' any  < <(find . -type f -iname '*.zip' -print0)

          if [ ${#pref[@]} -gt 0 ]; then
            mapfile -t zips < <(printf '%s\n' "${pref[@]##*/}" | sort -V)
            # Re-map to full paths
            pick=""
            for z in "${zips[@]}"; do
              # find original full path for this basename
              for p in "${pref[@]}"; do
                if [ "${p##*/}" = "$z" ]; then pick="$p"; fi
              done
            done
          elif [ ${#any[@]} -gt 0 ]; then
            # Fallback: any zip (last in version-sort order)
            pick="$(printf '%s\n' "${any[@]##*/}" | sort -V | tail -n1)"
            for p in "${any[@]}"; do
              if [ "${p##*/}" = "$pick" ]; then pick="$p"; fi
            done
          else
            echo "ERROR: No .zip files found in repository." >&2
            exit 1
          fi

          echo "Using zip: $pick"
          unzip -q "$pick" -d extracted

          # Prefer a directory that contains gradlew; otherwise use settings.gradle[.kts]
          gradlew_path="$(find extracted -type f -name 'gradlew' | head -n1 || true)"
          if [ -n "$gradlew_path" ]; then
            project_dir="$(dirname "$gradlew_path")"
            echo "Detected Gradle wrapper in: $project_dir"
            echo "HAS_WRAPPER=true" >> "$GITHUB_ENV"
            echo "PROJECT_DIR=$project_dir" >> "$GITHUB_ENV"
            chmod +x "$project_dir/gradlew"
            exit 0
          fi

          # No wrapper â€” find a Gradle project root by settings.gradle or settings.gradle.kts
          settings_dir="$(find extracted -type f \( -name 'settings.gradle' -o -name 'settings.gradle.kts' \) -exec dirname {} \; | head -n1 || true)"
          if [ -z "$settings_dir" ]; then
            echo "ERROR: Could not locate a Gradle project (no gradlew, no settings.gradle*)." >&2
            exit 1
          fi

          echo "Detected Gradle project root: $settings_dir"
          echo "HAS_WRAPPER=false" >> "$GITHUB_ENV"
          echo "PROJECT_DIR=$settings_dir" >> "$GITHUB_ENV"

      # If there is NO wrapper, set up a Gradle runtime we can use
      - name: Set up Gradle (no wrapper case)
        if: env.HAS_WRAPPER == 'false'
        uses: gradle/gradle-build-action@v3
        with:
          # Safe default; adjust if your project requires a specific Gradle version
          gradle-version: '8.7'

      - name: Build debug APK (with wrapper)
        if: env.HAS_WRAPPER == 'true'
        run: |
          cd "$PROJECT_DIR"
          ./gradlew --no-daemon assembleDebug

      - name: Build debug APK (no wrapper)
        if: env.HAS_WRAPPER == 'false'
        run: |
          gradle -p "$PROJECT_DIR" --no-daemon assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            ${{ env.PROJECT_DIR }}/**/outputs/apk/debug/*.apk
            ${{ env.PROJECT_DIR }}/**/outputs/apk/*/debug/*.apk
