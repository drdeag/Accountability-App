name: Android APK (Debug)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Install SDK platforms & build-tools
        run: sdkmanager "platforms;android-33" "build-tools;33.0.2"

      - name: Unzip project (handles spaces/parentheses; searches repo; picks highest #)
        id: unzip
        shell: bash
        run: |
          set -euo pipefail

          # Prefer Accountability_Project*.zip, else fallback to newest *.zip
          mapfile -d '' pref < <(find . -type f -iname 'Accountability_Project*.zip' -print0)
          mapfile -d '' any  < <(find . -type f -iname '*.zip' -print0)

          if [ ${#pref[@]} -gt 0 ]; then
            pick="$(printf '%s\n' "${pref[@]##*/}" | sort -V | tail -n1)"
            for p in "${pref[@]}"; do [ "${p##*/}" = "$pick" ] && pick="$p"; done
          elif [ ${#any[@]} -gt 0 ]; then
            pick="$(printf '%s\n' "${any[@]##*/}" | sort -V | tail -n1)"
            for p in "${any[@]}"; do [ "${p##*/}" = "$pick" ] && pick="$p"; done
          else
            echo "ERROR: No .zip files found."; exit 1
          fi

          echo "Using zip: $pick"
          unzip -q "$pick" -d extracted

          # Detect project dir (wrapper first, then settings.gradle[.kts])
          if gradlew_path="$(find extracted -type f -name gradlew | head -n1)"; then
            project_dir="$(dirname "$gradlew_path")"
            echo "HAS_WRAPPER=true" >> "$GITHUB_ENV"
          else
            project_dir="$(find extracted -type f \( -name settings.gradle -o -name settings.gradle.kts \) -exec dirname {} \; | head -n1 || true)"
            if [ -z "$project_dir" ]; then
              echo "ERROR: No Gradle wrapper and no settings.gradle* found."; exit 1
            fi
            echo "HAS_WRAPPER=false" >> "$GITHUB_ENV"
          fi

          echo "PROJECT_DIR=$project_dir" >> "$GITHUB_ENV"
          echo "Detected project dir: $project_dir"

          # Ensure wrapper is executable if present
          if [ -f "$project_dir/gradlew" ]; then chmod +x "$project_dir/gradlew"; fi

      - name: Show project structure
        run: |
          echo "=== Project tree (top 200) ==="
          (cd "$PROJECT_DIR" && ls -la && echo && find . -maxdepth 3 -type d -print | head -n 200)

      - name: Install XML tools (for manifest validation)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Find and validate AndroidManifest.xml
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Searching for AndroidManifest.xml files ==="
          mapfile -d '' manifests < <(find "$PROJECT_DIR" -type f -name AndroidManifest.xml -print0 || true)
          if [ ${#manifests[@]} -eq 0 ]; then
            echo "WARNING: No AndroidManifest.xml found under $PROJECT_DIR"
          fi
          for f in "${manifests[@]}"; do
            echo "----- $f -----"
            nl -ba "$f" | sed -n '1,160p'
            echo "Validating XML with xmllint..."
            if ! xmllint --noout "$f"; then
              echo "xmllint found a parsing error in $f"
            else
              echo "OK: $f"
            fi
            echo
          done

      - name: Set up Gradle (no wrapper case)
        if: env.HAS_WRAPPER == 'false'
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: '8.7'

      - name: Build debug APK (with wrapper)
        if: env.HAS_WRAPPER == 'true'
        run: |
          cd "$PROJECT_DIR"
          ./gradlew --no-daemon --warning-mode all --stacktrace --info assembleDebug

      - name: Build debug APK (no wrapper)
        if: env.HAS_WRAPPER == 'false'
        run: |
          gradle -p "$PROJECT_DIR" --no-daemon --warning-mode all --stacktrace --info assembleDebug

      - name: Upload APK
        if: always() # try to upload if it exists
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            ${{ env.PROJECT_DIR }}/**/outputs/apk/debug/*.apk
            ${{ env.PROJECT_DIR }}/**/outputs/apk/*/debug/*.apk
