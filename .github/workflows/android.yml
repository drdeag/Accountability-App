name: Android APK (Debug)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Warn-only: list directories with leading/trailing whitespace (doesn't fail build)
      - name: Detect folders with leading/trailing whitespace (warn-only)
        shell: bash
        run: |
          set -euo pipefail
          echo "Scanning for directory names with leading/trailing whitespace..."
          found=0
          while IFS= read -r -d '' d; do
            base="$(basename "$d")"
            if printf '%s' "$base" | grep -qE '^[[:space:]]|[[:space:]]$'; then
              found=1
              printf '⚠️  Problem directory: %s\n' "$d"
            fi
          done < <(find . -type d -print0)
          if [ $found -eq 0 ]; then
            echo "✅ No problematic directory names found."
          else
            echo "::warning::One or more folders have leading/trailing spaces. Rename when convenient."
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      # Unzip: prefers the cleaned file you just downloaded; falls back to other zips
      - name: Unzip project
        id: unzip
        shell: bash
        run: |
          set -euo pipefail

          mapfile -d '' preferred < <(find . -maxdepth 2 -type f -iname 'Accountability_Project_clean.zip' -print0)
          mapfile -d '' fallback  < <(find . -maxdepth 2 -type f -iname 'Accountability_Project*.zip' -print0)
          mapfile -d '' anyzip   < <(find . -maxdepth 2 -type f -iname '*.zip' -print0)

          pick=""
          if [ ${#preferred[@]} -gt 0 ]; then
            pick="${preferred[0]}"
          elif [ ${#fallback[@]} -gt 0 ]; then
            pick="$(printf '%s\n' "${fallback[@]##*/}" | sort -V | tail -n1)"
            for p in "${fallback[@]}"; do [ "${p##*/}" = "$pick" ] && pick="$p"; done
          elif [ ${#anyzip[@]} -gt 0 ]; then
            pick="$(printf '%s\n' "${anyzip[@]##*/}" | sort -V | tail -n1)"
            for p in "${anyzip[@]}"; do [ "${p##*/}" = "$pick" ] && pick="$p"; done
          else
            echo "ERROR: No .zip files found in repository." >&2
            exit 1
          fi

          echo "Using zip: $pick"
          mkdir -p extracted
          unzip -q "$pick" -d extracted

          # Detect project dir via settings.gradle[.kts] (no wrapper present in your ZIP)
          project_dir="$(find extracted -type f \( -name settings.gradle -o -name settings.gradle.kts \) -exec dirname {} \; | head -n1 || true)"
          if [ -z "$project_dir" ]; then
            echo "ERROR: Could not locate a Gradle project (no settings.gradle*)." >&2
            exit 1
          fi
          echo "PROJECT_DIR=$project_dir" >> "$GITHUB_ENV"
          echo "Detected project dir: $project_dir"

      - name: Show project structure (top 200)
        run: |
          (cd "$PROJECT_DIR" && ls -la && echo && find . -maxdepth 3 -type d -print | head -n 200)

      # Install the SDK platform matching your project (compileSdk = 34)
      - name: Install Android SDK platform & build-tools
        shell: bash
        run: |
          set -euo pipefail
          sdkmanager "platforms;android-34" || true
          # No explicit buildToolsVersion in your Gradle, so we use a sensible default:
          sdkmanager "build-tools;34.0.0" || true

      # Safety net: if any manifest still has BOM or XML declaration, sanitize again
      - name: Sanitize AndroidManifest.xml (BOM/XML decl/leading blanks)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' manifests < <(find "$PROJECT_DIR" -type f -name AndroidManifest.xml -print0 || true)
          for f in "${manifests[@]}"; do
            perl -i -0777 -pe 's/^\x{FEFF}//; s/\A(?:\s*<\?xml[^>]*\?>)?\s*//s' "$f"
          done

      - name: Validate AndroidManifest.xml
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          mapfile -d '' manifests < <(find "$PROJECT_DIR" -type f -name AndroidManifest.xml -print0 || true)
          for f in "${manifests[@]}"; do
            echo "Validating: $f"
            xmllint --noout "$f"
          done

      # Force Java & Kotlin to JVM 1.8 via a Gradle init script (no project edits)
      - name: Create Gradle init script (JVM 1.8)
        run: |
          cat > "$GITHUB_WORKSPACE/jvm8.gradle.kts" <<'KTS'
          import org.gradle.api.tasks.compile.JavaCompile
          import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
          allprojects {
              tasks.withType(JavaCompile::class.java).configureEach {
                  options.release.set(8)
              }
              tasks.withType(KotlinCompile::class.java).configureEach {
                  kotlinOptions.jvmTarget = "1.8"
              }
          }
          KTS
          echo "GRADLE_ARGS=--init-script $GITHUB_WORKSPACE/jvm8.gradle.kts" >> "$GITHUB_ENV"

      # Use the official Gradle action (no wrapper in your project)
      - name: Set up Gradle (no wrapper)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: '8.7'

      - name: Build debug APK
        shell: bash
        run: |
          set -euo pipefail
          gradle $GRADLE_ARGS -p "$PROJECT_DIR" --no-daemon --warning-mode all --stacktrace --info assembleDebug 2>&1 | tee "$GITHUB_WORKSPACE/build.log"
          ec=${PIPESTATUS[0]}; echo "Build exit code: $ec"; exit $ec

      - name: Show last 200 lines of build log (on failure)
        if: failure()
        run: |
          if [ -f "$GITHUB_WORKSPACE/build.log" ]; then
            echo "=== Tail of build.log ==="
            tail -n 200 "$GITHUB_WORKSPACE/build.log"
          else
            echo "No build.log found."
          fi

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            ${{ env.PROJECT_DIR }}/**/outputs/apk/debug/*.apk
            ${{ env.PROJECT_DIR }}/**/outputs/apk/*/debug/*.apk

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ github.workspace }}/build.log
            /home/runner/.gradle/daemon/*/*.log
